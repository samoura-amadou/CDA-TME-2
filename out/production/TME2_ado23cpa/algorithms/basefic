import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import supportGUI.Circle;
import supportGUI.Line;

public class DefaultTeam {

  // calculDiametre: ArrayList<Point> --> Line
  //   renvoie une paire de points de la liste, de distance maximum.
  public Line calculDiametre(ArrayList<Point> points) {
    if (points.size() < 3) {
      return null;
    }

    Point p = points.get(0);
    Point q = points.get(1);

    /*******************
     * PARTIE A ECRIRE *
     *******************/
    return new Line(p, q);
  }

  // calculDiametreOptimise: ArrayList<Point> --> Line
  //   renvoie une paire de points de la liste, de distance maximum.
  public Line calculDiametreOptimise(ArrayList<Point> points) {
    if (points.size() < 3) {
      return null;
    }

    Point p = points.get(1);
    Point q = points.get(2);

    /*******************
     * PARTIE A ECRIRE *
     *******************/
    return new Line(p, q);
  }

  // calculCercleMin: ArrayList<Point> --> Circle
  //   renvoie un cercle couvrant tout point de la liste, de rayon minimum.
  public Circle calculCercleMin(ArrayList<Point> points) {
    if (points.isEmpty()) {
      return null;
    }

    Point center = points.get(0);
    int radius = 100;

    /*******************
     * PARTIE A ECRIRE *
     *******************/
    return new Circle(center, radius);
  }

  // enveloppeConvexe: ArrayList<Point> --> ArrayList<Point>
  //   renvoie l'enveloppe convexe de la liste.
  public ArrayList<Point> enveloppeConvexe(ArrayList<Point> points) {
    if (points.size() < 3) {
      return null;
    }

    ArrayList<Point> enveloppe = new ArrayList<Point>();

    enveloppe.add(points.get(0));
    enveloppe.add(points.get(1));
    enveloppe.add(points.get(2));

    /*******************
     * PARTIE A ECRIRE *
     *******************/
    return exercice1(points);
  }

  // enveloppeConvexeTriPixel: ArrayList<Point> --> ArrayList<Point>
  //   renvoie l'enveloppe convexe de la liste en utilisant le tri par pixel.
  public ArrayList<Point> enveloppeConvexeTriPixel(ArrayList<Point> points) {
    if (points.size() < 3) {
      return null;
    }

    // Filtrage des points ayant les mêmes abscisses
    filterSameX(points);

    // Tri par pixel
    Collections.sort(points, (p1, p2) -> Integer.compare(p1.y, p2.y));

    // Algorithme naïf pour calculer l'enveloppe convexe
    return exercice1(points);
  }

  // Méthode de filtrage des points ayant les mêmes abscisses
  private void filterSameX(ArrayList<Point> points) {
    // Utilisation d'un HashSet pour stocker les abscisses uniques
    HashSet<Integer> uniqueX = new HashSet<>();

    // Liste temporaire pour stocker les points filtrés
    ArrayList<Point> filteredPoints = new ArrayList<>();

    for (Point point : points) {
      if (uniqueX.add(point.x)) {
        filteredPoints.add(point);
      }
    }

    // Mise à jour de la liste points avec les points filtrés
    points.clear();
    points.addAll(filteredPoints);
  }

  // ...

  // Exercice 2 - Tri par pixel
  // (Adaptation des méthodes existantes)
  // ... (Voir la démonstration et l'implémentation dans la réponse précédente)

  // Exercice 3 - Filtrage Akl-Toussaint
  // (Pas d'implémentation spécifique ici, car la question concerne l'avantage de l'application simultanée avec le tri par pixel)

  // Exercice 4 - Algorithme Jarvis
  // ... (Implémentation de l'algorithme Jarvis)

  // Exercice 5 - Algorithme Graham (modifié)
  // ... (Implémentation de l'algorithme Graham)

  // Exercice 6 - Algorithme QuickHull
  // ... (Implémentation de l'algorithme QuickHull)

  private ArrayList<Point> exercice1(ArrayList<Point> points) {
    if (points.size() < 4) return points;

    ArrayList<Point> enveloppe = new ArrayList<Point>();

    for (Point p : points) {
      for (Point q : points) {
        if (p.equals(q)) continue;
        Point ref = p;
        for (Point r : points) if (crossProduct(p, q, p, r) != 0) {
          ref = r;
          break;
        }
        if (ref.equals(p)) {
          enveloppe.add(p);
          enveloppe.add(q);
          continue;
        }
        double signeRef = crossProduct(p, q, p, ref);
        boolean estCote = true;
        for (Point r : points) if (signeRef * crossProduct(p, q, p, r) < 0) {
          estCote = false;
          break;
        } // ici sans le break le temps de calcul devient horrible
        if (estCote) {
          enveloppe.add(p);
          enveloppe.add(q);
        }
      }
    }

    return enveloppe; // ici l'enveloppe n'est pas triée dans le sens trigonométrique, et contient des doublons, mais tant pis!
  }

  private double crossProduct(Point p, Point q, Point s, Point t) {
    return ((q.x - p.x) * (t.y - s.y) - (q.y - p.y) * (t.x - s.x));
  }

  // ... (Implémentation des autres méthodes et exercices)
}
